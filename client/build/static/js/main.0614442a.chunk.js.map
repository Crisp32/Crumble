{"version":3,"sources":["interface.tsx","socket.tsx","utils.tsx","game.tsx","gameobjects/controller.tsx","renderer.tsx","gameobjects/handrocket.tsx","gameobjects/shadow.tsx","gameobjects/nametag.tsx","gameobjects/particles.tsx","gameobjects/player.tsx","gameobjects/rocket.tsx","gameobjects/camera.tsx","gameobjects/tile.tsx","gameobjects/chunk.tsx","react/main.tsx","react/serviceWorker.ts","index.tsx"],"names":["enteredQueue","setEnteredQueue","value","displayContentArea","id","$","hide","css","displayClientMsg","message","$clientMsg","text","toUpperCase","setTimeout","length","connectToLobby","NAME","val","toString","trim","MAX_NAME_LENGTH","ajax","type","url","dataType","success","res","lobby","name","lobbyId","protocol","socket","io","window","location","hostname","port","transports","upgrade","on","SocketEvents","CONNECTED","console","log","emit","REGISTER","DISCONNECT","error","clearInterval","inputUpdateInterval","document","removeEventListener","mouseMovementTracker","NAMETAG_ENEMY_COLOUR","RECV_ID","socketId","clientSocketId","START_GAME","gameData","start","RenderController","initLayers","PLAYERS","players","PLAYER","connectedPlayers","Player","Vec2","pos","x","y","level","chunks","forEach","CHUNK_POS","loadedChunks","push","Chunk","finalChunks","chunk","isBottom","chunkKey","CHUNK","chunkPos","chunkEdge","ChunkEdge","generateChunkEdges","lastHandrocketAngle","lastFacingDir","keysPressed","mousePressed","addEventListener","key","mouse","button","canShoot","handrocketAngle","facingDir","PLAYER_REND_POS","Camera","convertToCameraSpace","mousePos","CURSOR_MIDDLE_DEADSPACE","HandrocketAngles","UP","DOWN","MIDDLE","FacingDirections","LEFT","RIGHT","GameEvents","ANGLE_CHANGE","angle","direction","setInterval","PLAYER_MOVE","Directions","calcCurrentChunk","ROCKET_SHOT","SHOOT_COOLDOWN_MS","SEND_INPUT_MS","handleInput","backgroundScroll","render","p5","game","PLAYER_LEAVE","destroy","player","serverPos","PLAYER_DIED","deathInfo","onDeath","fellOffFront","rocket","rocketProjectiles","instanceId","Rocket","ownerSocketId","createMuzzleBlast","ROCKET_EXPLODE","explode","TILE_DESTROYED","destroyTime","instant","TILE_DESTROY_WARNING_MS","tileKey","tiles","TILE","tilePos","PLAYER_WON","won","NAMETAG_SELF_COLOUR","displayWinner","setHandrocketAngle","handleClientSocket","renderLayer","invisible","layer","layers","this","renderer","index","MIN_LAYER","MAX_LAYER","renderController","assets","HANDROCKET_SPRITESHEET","PLAYER_SPRITESHEET","PLAYER_FALL_SPRITESHEET","PLAYER_SHADOW","Image","splitSpritesheet","sheet","spriteWidth","spriteHeight","frames","splitSheet","frame","FRAME_IMAGE","get","p","playerSpritesheet","playerFallSpritesheet","handrocketSpritesheet","preload","zero","loadImage","GRAPHICS_PATH","setup","PLAYER_DIMENSIONS","width","height","PLAYER_FALL_DIMENSIONS","HANDROCKET_DIMENSIONS","CONTEXT","createCanvas","windowWidth","windowHeight","P2D","elt","getContext","mozImageSmoothingEnabled","webkitImageSmoothingEnabled","msImageSmoothingEnabled","imageSmoothingEnabled","frameRate","disableFriendlyErrors","draw","clear","background","BG_COLOUR","update","renderAllControllers","mouseX","mouseY","windowResized","resizeCanvas","Handrocket","spriteFrame","setRenderLayer","directionHorizontalOffset","angleVertOffset","REND_POS","translate","scale","imageMode","CENTER","image","pop","Shadow","tint","Nametag","colour","fill","textFont","textAlign","textSize","randomSpeed","speed","randomInt","TileDestroyParticles","particles","particleCount","minParticleSize","maxParticleSize","minLifetime","maxLifetime","baseSpeed","initParticles","pc","size","maxLifetimeFrames","lifetimeFrames","rise","run","TILE_SIZE","particle","noStroke","TILE_DESTROY_PARTICLE_COLOUR","rectMode","rect","filter","part","remove","MuzzleBlastParticles","PARTICLE_REND_POS","MUZZLE_BLAST_PARTICLE_COLOUR","SmokeTrailParticles","stopParticles","ROCKET_SMOKE_TRAIL_COLOUR","ExplodeParticles","ROCKET_PROJECTILE_COLOUR","currentChunk","dead","handrocket","shadow","nametag","calculatingSpeed","state","handrocketVertOffset","fallAcceleration","fallVelocity","fallTerminalVelocity","PlayerAnimationStates","IDLE","vertOffsetNormal","nametagColour","setAngle","Math","round","TOTAL_CHUNK_SIZE","SPEED_POS_OLD","abs","RUN","DEATH_INTERVAL","offset","sprite","renderPos","lerp","updateSpeed","frameCount","renderPlayerSprite","vertOffsetDown","vertOffsetUp","PLAYER_SHADOW_OFFSET","PLAYER_NAMETAG_OFFSET","trailParticles","shake","CLIENT_ROCKET_SPEED","LERP_POS","shakeTimer","shakePos","shakePower","power","duration","Tile","fadeColour","renderColour","TILE_NORMAL_COLOUR","ms","flash","interval","TILE_WEAK_COLOUR","RGBColourCode","color","r","g","b","CHUNK_SIZE_PADDING","undefined","initTiles","CHUNK_SIZE","TILE_POS","RAND_SIZE","RAND_POS","CHUNK_EDGE_HEIGHT","particleDir","CHUNK_EDGE_COLOUR","sin","end","amount","lerpNum","s","e","floor","min","max","ceil","random","scrollY","Main","style","display","onClick","reload","className","spellCheck","placeholder","src","alt","React","Boolean","match","ReactDOM","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.0614442a.chunk.js","sourcesContent":["/**\n * Crumble Client Main Interface Manager\n * @author Connell Reffo\n */\n\nimport { handleClientSocket } from \"./socket\";\nimport { NAMETAG_ENEMY_COLOUR, NAMETAG_SELF_COLOUR, MAX_NAME_LENGTH } from \"./utils\";\n\nimport $ from \"jquery\";\n\nlet enteredQueue = false;\n\n/**\n * Sets the Value of Entered Queue (Required for Access Cross File)\n * @param value Value of Entered Queue Variable to be Set\n */\nexport function setEnteredQueue(value: boolean) {\n    enteredQueue = value;\n}\n\n/**\n * Switches to a Different Content Area\n * @param id The ID of the Content Wrapper Element\n */\nexport function displayContentArea(id: string) {\n    $(\".content-wrapper\").hide();\n    $(`#${id}`).css(\"display\", \"block\");\n}\n\n/**\n * Displays a Message Under the Crumble Title Element on the Main Screen\n * @param message Message to Dispay to the Client\n */\nexport function displayClientMsg(message: string) {\n    const $clientMsg = $(\"#client-msg\");\n\n    $clientMsg.css(\"display\", \"block\");\n    $clientMsg.text(message.toUpperCase());\n\n    setTimeout(() => {\n        $clientMsg.hide();\n    }, message.length * 110);\n}\n\n/**\n * Asks the Crumble Server for an Available Lobby ID\n */\nexport function connectToLobby() {\n    const NAME = $(\"#name-input\").val()?.toString().trim() as string;\n\n    // Check if Already Entered Queue\n    if (!enteredQueue) {\n\n        // Check if Name is Too Long\n        if (NAME.length > MAX_NAME_LENGTH) {\n            displayClientMsg(`Player Name Must be Under ${MAX_NAME_LENGTH} Characters`);\n        }\n        else if (NAME.length === 0) {\n            displayClientMsg(\"Player Name Must be Greater than 0 Characters\");\n        }\n        else {\n\n            // Send AJAX Request\n            $.ajax({\n                type: \"POST\",\n                url: \"/api/find-lobby\",\n                dataType: \"json\",\n                success: (res) => {\n                    if (res.lobby != null) {\n                        handleClientSocket(NAME, res.lobby as string);\n                        setEnteredQueue(true);\n                    }\n                    else {\n                        displayClientMsg(\"Maximum Amount of Active Games Reached\");\n                    }\n                },\n                error: (error) => {\n                    displayClientMsg(\"500: Internal Server Error\");\n                }\n            });\n        }\n    }\n}\n\n/**\n * Displays Win/Loss Screen\n * @param name Name of the Winner\n * @param won If the Current Client Won\n */\nexport function displayWinner(name: string, won: boolean) {\n    if (won) {\n        $(\"#winner-txt\").css(\"color\", NAMETAG_SELF_COLOUR);\n    }\n    else {\n        $(\"#winner-txt\").css(\"color\", NAMETAG_ENEMY_COLOUR);\n    }\n\n    $(\"#leave-game\").hide();\n    $(\"#winner-txt\").text(`< ${name.toUpperCase()} WINS >`);\n    $(\"#win-screen-container\").css(\"display\", \"block\");\n}\n\n/**\n * Displays a Connection Error for the Client\n * @param error Error Message to Display\n */\nexport function displayConnectionError(error: string) {\n    if (!enteredQueue) {\n        $(\"#leave-game\").hide();\n\n        $(\"#winner-txt\").css(\"color\", NAMETAG_ENEMY_COLOUR);\n        $(\"#winner-txt\").text(error.toUpperCase());\n\n        $(\"#win-screen-container\").css(\"display\", \"block\");\n    }\n    else {\n        $(\"#player-waiting\").text(error.toUpperCase());\n        $(\"#player-waiting\").css(\"color\", NAMETAG_ENEMY_COLOUR);\n    }\n}","/**\n * Crumble Client Socket Connection\n * @author Connell Reffo\n */\n\nimport { displayWinner, displayConnectionError, setEnteredQueue } from \"./interface\";\nimport { mousePos } from \"./renderer\";\nimport { startGame } from \"./game\";\nimport { IGameData, IPlayerData, IPlayerDeathData, SocketEvents, GameEvents, Directions, Vec2, SEND_INPUT_MS, TILE_DESTROY_WARNING_MS, generateChunkEdges, CURSOR_MIDDLE_DEADSPACE, HandrocketAngles, IAngleChangeData, FacingDirections, SHOOT_COOLDOWN_MS, IConnectedPlayer, IProjectile, IRocketData, ITileDestroyedData } from \"./utils\";\n\nimport Camera from \"./gameobjects/camera\";\nimport Player from \"./gameobjects/player\";\nimport Rocket from \"./gameobjects/rocket\";\nimport RenderController from \"./gameobjects/controller\";\n\nimport { Chunk } from \"./gameobjects/chunk\";\n\nimport $ from \"jquery\";\nimport io from \"socket.io-client\";\n\n/**\n * Client Socket Connection\n */\nlet socket: SocketIOClient.Socket;\n\n/**\n * Event Listener That Handles Mouse Movement\n */\nlet mouseMovementTracker: () => void;\n\n/**\n * Socket ID of the Current Client\n */\nexport let clientSocketId: string;\n\n/**\n * Interval Responsible for Sending Input Updates to the Server\n */\nexport let inputUpdateInterval: NodeJS.Timeout;\n\n/**\n * List of Chunk Render Controllers\n */\nexport let loadedChunks: Array<Chunk> = [];\n\n/**\n * Tracks Players Connected with the Server\n */\nexport let connectedPlayers: IConnectedPlayer = {};\n\n/**\n * Tracks Active Handrocket Projectiles from the Server\n */\nexport let rocketProjectiles: IProjectile = {};\n\n/**\n * Handles Crumble Keyboard and Mouse Input\n * @param socket Socket Connection to Send Input Updates to\n */\nfunction handleInput() {\n    let keysPressed: any = {};\n    let mousePressed: any = {};\n\n    // Keyboard Input\n    document.addEventListener(\"keydown\", (key) => {\n        keysPressed[key.key] = true;\n    });\n\n    document.addEventListener(\"keyup\", (key) => {\n        keysPressed[key.key] = false;\n    });\n\n    // Mouse Input\n    document.addEventListener(\"mousedown\", (mouse) => {\n        mousePressed[mouse.button] = true;\n    });\n\n    document.addEventListener(\"mouseup\", (mouse) => {\n        mousePressed[mouse.button] = false;\n    });\n\n    // On Mouse Move\n    let lastHandrocketAngle: HandrocketAngles;\n    let lastFacingDir: FacingDirections;\n\n    let canShoot = true;\n\n    mouseMovementTracker = () => {\n        const PLAYER_REND_POS = Camera.convertToCameraSpace(connectedPlayers[clientSocketId].pos);\n\n        let handrocketAngle: HandrocketAngles;\n        let facingDir: FacingDirections;\n\n        // Determine Angle Based on Mouse Position\n        if (mousePos.y < PLAYER_REND_POS.y - CURSOR_MIDDLE_DEADSPACE) {\n            handrocketAngle = HandrocketAngles.UP;\n        }\n        else if (mousePos.y > PLAYER_REND_POS.y + CURSOR_MIDDLE_DEADSPACE) {\n            handrocketAngle = HandrocketAngles.DOWN;\n        }\n        else {\n            handrocketAngle = HandrocketAngles.MIDDLE;\n        }\n\n        // Determine Facing Direction\n        if (mousePos.x < PLAYER_REND_POS.x) {\n            facingDir = FacingDirections.LEFT;\n        }\n        else {\n            facingDir = FacingDirections.RIGHT;\n        }\n\n        // Send Handrocket Angle to Server\n        if (handrocketAngle !== lastHandrocketAngle || facingDir !== lastFacingDir) {\n            socket.emit(GameEvents.ANGLE_CHANGE, {\n                angle: handrocketAngle,\n                direction: facingDir\n            });\n        }\n\n        lastHandrocketAngle = handrocketAngle;\n        lastFacingDir = facingDir;\n    }\n\n    document.addEventListener(\"mousemove\", mouseMovementTracker);\n\n    inputUpdateInterval = setInterval(() => {\n\n        // Up and Down Movement\n        if (keysPressed[\"w\"]) {\n            socket.emit(GameEvents.PLAYER_MOVE, Directions.UP);\n            connectedPlayers[socket.id].calcCurrentChunk();\n        }\n        else if (keysPressed[\"s\"]) {\n            socket.emit(GameEvents.PLAYER_MOVE, Directions.DOWN);\n            connectedPlayers[socket.id].calcCurrentChunk();\n        }\n\n        // Left and Right Movement\n        if (keysPressed[\"a\"]) {\n            socket.emit(GameEvents.PLAYER_MOVE, Directions.LEFT);\n            connectedPlayers[socket.id].calcCurrentChunk();\n        }\n        else if (keysPressed[\"d\"]) {\n            socket.emit(GameEvents.PLAYER_MOVE, Directions.RIGHT);\n            connectedPlayers[socket.id].calcCurrentChunk();\n        }\n\n        // Handrocket Shoot Input\n        if (mousePressed[0]) {\n            if (canShoot) {\n                canShoot = false;\n                socket.emit(GameEvents.ROCKET_SHOT);  \n\n                // Client Side Shoot Cooldown\n                setTimeout(() => {\n                    canShoot = true;\n                }, SHOOT_COOLDOWN_MS);\n            }\n        }\n\n    }, SEND_INPUT_MS);\n}\n\n/**\n * Registers the Crumble Client with the Socket Server\n * @param name Name of the Player\n * @param lobbyId The Lobby ID to Connect to\n */\nexport function handleClientSocket(name: string, lobbyId: string) {\n    let protocol = \"ws\";\n\n    // Check if Application is in Production\n    if (process.env.NODE_ENV === \"production\") {\n\n        // Upgrade to WebSocket Secure Protocol\n        protocol = \"wss\";\n    }\n\n    socket = io(`${protocol}://${window.location.hostname}:${window.location.port}/lobbies/${lobbyId}`, { transports: [\"websocket\"], upgrade: false });\n\n    // Connection Event\n    socket.on(SocketEvents.CONNECTED, () => {\n        console.log(`Connected to Lobby: ${lobbyId}`);\n        \n        socket.emit(SocketEvents.REGISTER, name);\n    });\n\n    // Disconnect Event\n    socket.on(SocketEvents.DISCONNECT, () => {\n        clearInterval(inputUpdateInterval);\n        document.removeEventListener(\"mousemove\", mouseMovementTracker);\n\n        displayConnectionError(\"Lost Connection to Server\");\n    });\n\n    // Recieve Socket ID Event\n    socket.on(SocketEvents.RECV_ID, (socketId: string) => {\n        clientSocketId = socketId;\n    });\n\n    // Register Event\n    socket.on(SocketEvents.START_GAME, (gameData: IGameData) => {\n        if (gameData.start) {\n            setEnteredQueue(false);\n\n            $(\"#name-choose-menu\").css(\"display\", \"none\");\n            $(\"#match-wait-menu\").css(\"display\", \"none\");\n\n            // Initialize Render Layers\n            RenderController.initLayers();\n\n            // Instantiate Players\n            const PLAYERS: any = gameData.players;\n\n            for (let socketId in PLAYERS) {\n                const PLAYER = PLAYERS[socketId] as IPlayerData;\n                connectedPlayers[socketId] = new Player(PLAYER.name, new Vec2(PLAYER.pos.x, PLAYER.pos.y), socketId);\n            }\n\n            // Instantiate Chunks\n            gameData.level?.chunks.forEach((pos: any) => {\n                const CHUNK_POS = new Vec2(pos.x, pos.y);\n\n                loadedChunks.push(new Chunk(CHUNK_POS));\n            });\n\n            loadedChunks = generateChunkEdges(loadedChunks);\n\n            // Start Game\n            handleInput();\n            startGame();\n        }\n        else {\n            $(\"#name-choose-menu\").css(\"display\", \"none\");\n            $(\"#match-wait-menu\").css(\"display\", \"block\");\n        }\n    });\n\n    // Player Leave Event\n    socket.on(SocketEvents.PLAYER_LEAVE, (socketId: string) => {\n        console.log(`Player of Socket ID \"${socketId}\" has Left`);\n\n        connectedPlayers[socketId].destroy();\n    });\n\n    // Game Events\n\n    // Player Move Event\n    socket.on(GameEvents.PLAYER_MOVE, (player: IPlayerData) => {\n\n        // Set Player Position\n        connectedPlayers[player.socketId as string].serverPos = new Vec2(player.pos.x, player.pos.y);\n    });\n\n    // Player Death Event\n    socket.on(GameEvents.PLAYER_DIED, (deathInfo: IPlayerDeathData) => {\n        if (connectedPlayers[clientSocketId].socketId === deathInfo.socketId) {\n            clearInterval(inputUpdateInterval);\n            document.removeEventListener(\"mousemove\", mouseMovementTracker);\n        }\n\n        // Trigger On Death Event\n        connectedPlayers[deathInfo.socketId].onDeath(deathInfo.fellOffFront);\n    });\n\n    // Create Rocket Event\n    socket.on(GameEvents.ROCKET_SHOT, (rocket: IRocketData) => {\n        rocketProjectiles[rocket.instanceId] = new Rocket(rocket.pos, rocket.direction as Vec2);\n\n        // Create Muzzle Blast Particles\n        connectedPlayers[rocket.ownerSocketId as string].createMuzzleBlast();\n    });\n\n    // Rocket Explode Event\n    socket.on(GameEvents.ROCKET_EXPLODE, (instanceId: number) => {\n        rocketProjectiles[instanceId].explode();\n    });\n\n    // Tile Destroy Event\n    socket.on(GameEvents.TILE_DESTROYED, (res: ITileDestroyedData) => {\n        let destroyTime = 0;\n\n        if (!res.instant) {\n            destroyTime = TILE_DESTROY_WARNING_MS;\n        }\n\n        // Loop Through All Chunks to Find Tile\n        for (let chunkKey in loadedChunks) {\n            const CHUNK = loadedChunks[chunkKey];\n\n            // Loop Through Each Tile in Chunk\n            for (let tileKey in CHUNK.tiles) {\n                const TILE = CHUNK.tiles[tileKey];\n\n                if (TILE.tilePos.x === res.pos.x && TILE.tilePos.y === res.pos.y) {\n\n                    // Destroy Correct Tile\n                    loadedChunks[chunkKey].tiles[tileKey].destroy(destroyTime);\n                    break;\n                }\n            }\n        }\n    });\n\n    // On Player Win Event\n    socket.on(GameEvents.PLAYER_WON, (socketId: string) => {\n        clearInterval(inputUpdateInterval);\n        document.removeEventListener(\"mousemove\", mouseMovementTracker);\n    \n        setTimeout(() => {\n            displayWinner(connectedPlayers[socketId].name, clientSocketId === socketId);\n        }, 1000);\n    });\n\n    // On Handrocket Angle Change Event\n    socket.on(GameEvents.ANGLE_CHANGE, (res: IAngleChangeData) => {\n        connectedPlayers[res.socketId].setHandrocketAngle(res.angle);\n        connectedPlayers[res.socketId].direction = res.direction;\n    });\n}","/**\n * Crumble Client Main Ulitity File\n * Colour Palette: ENDESGA 32 (https://lospec.com/palette-list/endesga-32)\n * @author Connell Reffo\n */\n\nimport Player from \"./gameobjects/player\";\nimport Rocket from \"./gameobjects/rocket\";\n\nimport { Chunk, ChunkEdge } from \"./gameobjects/chunk\";\n\n/**\n * Represents an RGB Colour Code\n */\nexport class RGBColourCode {\n    public r: number;\n    public g: number;\n    public b: number;\n\n    /**\n     * @param r Red Channel\n     * @param g Green Channel\n     * @param b Blue Channel\n     */\n    constructor(r: number, g: number, b: number) {\n        this.r = r;\n        this.g = g;\n        this.b = b;\n    }\n\n    /**\n     * Lerps Between 2 Different Colours\n     */\n    public static lerp(start: RGBColourCode, end: RGBColourCode, amount: number): RGBColourCode {\n        amount /= 10;\n\n        function lerpNum(s: number, e: number) {\n            return (1 - amount) * s + amount * e;\n        }\n\n        return new RGBColourCode(Math.floor(lerpNum(start.r, end.r)), Math.floor(lerpNum(start.g, end.g)), Math.floor(lerpNum(start.b, end.b)));\n    }\n}\n\n/**\n * Represents a 2D Position\n */\nexport class Vec2 {\n    public x: number;\n    public y: number;\n\n    public static zero: Vec2 = new Vec2(0, 0);\n\n    /**\n     * @param x X Position\n     * @param y Y Position\n     */\n    constructor (x: number, y: number) {\n        this.x = x;\n        this.y = y;\n    }\n\n    /**\n     * Lerps Between 2 Different Vectors\n     * @param start Start Vector\n     * @param end End Vector\n     * @param amount Lerp Amount\n     */\n    public static lerp(start: Vec2, end: Vec2, amount: number): Vec2 {\n        return new Vec2((1 - amount) * start.x + amount * end.x, (1 - amount) * start.y + amount * end.y);\n    }\n}\n\n/**\n * Path Where Crumble Graphics Assets are Stored\n */\nexport let GRAPHICS_PATH = process.env.PUBLIC_URL + \"/graphics/\";\n\n/**\n * Maximum Length for Player Name\n */\nexport const MAX_NAME_LENGTH = 16;\n\n/**\n * Colour of the Canvas Background\n */\nexport const BG_COLOUR = \"#181425\";\n\n/**\n * Colour of Chunk Ground\n */\nexport const TILE_NORMAL_COLOUR = new RGBColourCode(192, 203, 220);\n\n/**\n * Colour of Chunk Ground When About to be Destroyed\n */\nexport const TILE_WEAK_COLOUR = new RGBColourCode(162, 38, 51);\n\n/**\n * Colour of Chunk Edge\n */\nexport const CHUNK_EDGE_COLOUR = \"#8b9bb4\";\n\n/**\n * Colour of Tile Destruction Particles\n */\nexport const TILE_DESTROY_PARTICLE_COLOUR = \"#5a6988\";\n\n/**\n * Colour of Muzzle Blast Particles\n */\nexport const MUZZLE_BLAST_PARTICLE_COLOUR = \"#feae34\";\n\n/**\n * Colour of Rocket Trail Smoke\n */\nexport const ROCKET_SMOKE_TRAIL_COLOUR = \"#ffffff\";\n\n/**\n * Colour of Rocket Projectile\n */\nexport const ROCKET_PROJECTILE_COLOUR = \"#ff0044\";\n\n/**\n * Nametag Colour for the Client Player\n */\nexport const NAMETAG_SELF_COLOUR = \"#1fad48\";\n\n/**\n * Nametag Colour for the Opposing Player(s)\n */\nexport const NAMETAG_ENEMY_COLOUR = \"#e43b44\";\n\n/**\n * Vertical Offset of Shadow from a Player\n */\nexport const PLAYER_SHADOW_OFFSET = 32;\n\n/**\n * Vertical Offset of Nametag from a Player\n */\nexport const PLAYER_NAMETAG_OFFSET = 53;\n\n/**\n * Vertical Offset of Held Handrock Weapon for a Player\n */\nexport const PLAYER_HANDROCKET_OFFSET = 22;\n\n/**\n * Speed of Rocket on the Client Side\n */\nexport const CLIENT_ROCKET_SPEED = 4.7;\n\n/**\n * Lowest Render Layer (Bottom)\n */\nexport const MIN_LAYER = 0;\n\n/**\n * Highest Render Layer (Top)\n */\nexport const MAX_LAYER = 10;\n\n/**\n * Height of a Chunk's Edge\n */\nexport const CHUNK_EDGE_HEIGHT = 45;\n\n/**\n * Size of Tiles\n */\nexport const TILE_SIZE = 60;\n\n/**\n * Size of Chunks in Tiles\n */\nexport const CHUNK_SIZE = 4;\n\n/**\n * Total Size of a Chunk\n */\nexport const TOTAL_CHUNK_SIZE = TILE_SIZE * CHUNK_SIZE;\n\n/**\n * Solves Pixel Gap Between Chunks\n */\nexport const CHUNK_SIZE_PADDING = 2;\n\n/**\n * Delay Between Input Updates Sent to the Server\n */\nexport const SEND_INPUT_MS = 100;\n\n/**\n * Warning Time Before a Tile Destroys\n */\nexport const TILE_DESTROY_WARNING_MS = 2000;\n\n/**\n * Cooldown Time Between Rockets being Fires by the Current Player\n */\nexport const SHOOT_COOLDOWN_MS = 600;\n\n/**\n * The Middleground Between Cursor being Considered Above or Below Player\n */\nexport const CURSOR_MIDDLE_DEADSPACE = 35;\n\n/**\n * Dimensions of Standing Player Sprites\n */\nexport const PLAYER_DIMENSIONS = {\n    scale: 7.5,\n    width: 5,\n    height: 9,\n    frames: 8\n};\n\n/**\n * Dimensions of Falling Player Sprites\n */\nexport const PLAYER_FALL_DIMENSIONS = {\n    width: 9,\n    height: 6,\n    frames: 3\n}\n\n/**\n * Dimensions of a Player's Handrocket\n */\nexport const HANDROCKET_DIMENSIONS = {\n    scale: 6,\n    width: 11,\n    height: 8,\n    frames: 3,\n    vertOffsetUp: -1,\n    vertOffsetDown: 14,\n    vertOffsetNormal: 8\n};\n\n/**\n * Data Attributed with an Individual Particle\n */\nexport interface IParticle {\n    pos: Vec2,\n    size: number,\n    maxLifetimeFrames: number, \n    lifetimeFrames: number,\n    direction: {\n        rise: number,\n        run: number\n    }\n}\n\n/**\n * Represents a Connected Player Object\n */\nexport interface IConnectedPlayer {\n    [socketId: string]: Player\n}\n\n/**\n * Represents a Rocket Projectile Object\n */\nexport interface IProjectile {\n    [instanceId: string]: Rocket\n}\n\n/**\n * Represents Data from Server used to Initialize a New Rocket on the Client\n */\nexport interface IRocketData {\n    ownerSocketId?: string\n    direction?: Vec2\n    pos: Vec2,\n    instanceId: number\n}\n\n/**\n * Represents Object Data of Players Sent from the Socket Server\n */\nexport interface IPlayerData {\n    socketId?: string\n    name: string,\n    pos: Vec2\n}\n\n/**\n * Represents Tile Destruction Data Sent from Server\n */\nexport interface ITileDestroyedData {\n    pos: Vec2,\n    instant: boolean\n}\n\n/**\n * Represents Game Data Sent to Client When Match Starts\n */\nexport interface IGameData {\n    start: boolean,\n    level?: ILevelMap,\n    players?: IPlayerData\n}\n\n/**\n * Represents Handrocket Angle Change Data from the Server\n */\nexport interface IAngleChangeData {\n    socketId: string,\n    angle: HandrocketAngles,\n    direction: FacingDirections\n}\n\n/**\n * Represents Data about Player Death\n */\nexport interface IPlayerDeathData {\n    socketId: string,\n    fellOffFront: boolean\n}\n\n/**\n * Represents Level Data From the Server\n */\nexport interface ILevelMap {\n    chunks: Array<Vec2>\n}\n\n/**\n * Enumeration of Events that Will Take Place on the Socket Client\n */\nexport enum SocketEvents {\n    CONNECTED = \"connect\",\n    DISCONNECT = \"disconnect\",\n    REGISTER = \"register\",\n    PLAYER_LEAVE = \"leave\",\n    START_GAME = \"startgame\",\n    RECV_ID = \"id\"\n}\n\n/**\n * Enumeration of Events that Will Take Place in Game\n */\nexport enum GameEvents {\n    PLAYER_MOVE = \"playermove\",\n    PLAYER_DIED = \"playerdied\",\n    PLAYER_WON = \"playerwon\",\n    TILE_DESTROYED = \"tiledestroyed\",\n    ANGLE_CHANGE = \"anglechange\",\n    ROCKET_SHOT = \"rocketshot\",\n    ROCKET_EXPLODE = \"rocketexplode\"\n}\n\n/**\n * Represents Animation Possible States a Player can be in\n */\nexport enum PlayerAnimationStates {\n    IDLE = \"idle\",\n    RUN = \"run\"\n}\n\n/**\n * Enumeration of Directions the Player can Face\n */\nexport enum FacingDirections {\n    LEFT = \"left\",\n    RIGHT = \"right\"\n}\n\n/**\n * Enumeration of Possible Directions a Player can Move\n */\nexport enum Directions {\n    UP = \"up\",\n    DOWN = \"down\",\n    LEFT = \"left\",\n    RIGHT = \"right\"\n}\n\n/**\n * Represents Possible Angles the Handrocket Can be Pointed At\n */\nexport enum HandrocketAngles {\n    UP = \"up\",\n    MIDDLE = \"middle\",\n    DOWN = \"down\"\n}\n\n/**\n * Generates Edges on a Given Map\n * @param chunks The Chunks to Generate Edges for\n */\nexport function generateChunkEdges(chunks: Array<Chunk>): Array<Chunk> {\n    let finalChunks: Array<Chunk> = [];\n\n    chunks.forEach((chunk) => {\n        let isBottom = true;\n\n        for (let chunkKey in chunks) {\n            const CHUNK = chunks[chunkKey];\n\n            if (CHUNK.chunkPos.y === chunk.chunkPos.y + 1 && CHUNK.chunkPos.x === chunk.chunkPos.x) {\n                isBottom = false;\n                break;\n            }\n        }\n\n        if (isBottom) {\n            chunk.chunkEdge = new ChunkEdge(chunk.chunkPos);\n        }\n        \n        finalChunks.push(chunk);\n    });\n\n    return finalChunks;\n}\n\n/**\n * Generates a Random Integer in a Range\n * @param min Minimum Value of Output\n * @param max Maximum Value of Output\n */\nexport function randomInt(min: number, max: number): number {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    \n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}","/**\n * Crumble Client Main Game File\n * @author Connell Reffo\n */\n\nimport { Vec2 } from \"./utils\";\nimport { game } from \"./renderer\";\n\nimport Camera from \"./gameobjects/camera\";\nimport $ from \"jquery\";\nimport p5 from \"p5\";\n\n/**\n * Initialize Camera Position Variable\n */\nCamera.pos = Vec2.zero;\n\n/**\n * Current Instance of P5 Renderer\n */\nexport let render: p5;\n\n/**\n * Background Scroll Position\n */\nlet scrollY = 0;\n\n/**\n * Background Scroll Effect Interval\n */\nlet backgroundScroll = setInterval(() => {\n    $(\"html\").css(\"background-position-y\", `${scrollY}px`);\n\n    scrollY += 0.1;\n}, 1);\n\n/**\n * Starts Game\n */\nexport function startGame() {\n    clearInterval(backgroundScroll);\n\n    render = new p5(game);\n\n    $(\"canvas\").css(\"display\", \"block\");\n    $(\"#leave-game\").css(\"display\", \"block\");\n    $(\"html\").css(\"background-image\", \"none\");\n}","/**\n * Main Render Controller Outline\n * @author Connell Reffo\n */\n\nimport { MIN_LAYER, MAX_LAYER } from \"../utils\";\n\n/**\n * Outline for Render Control Instances\n */\nexport default abstract class RenderController {\n    public static layers: any = {};\n\n    public renderLayer: number = 0;\n    public invisible: boolean = false;\n\n    /**\n     * Sets the Render Layer of the Render Controller\n     * @param layer Render Layer to Set to\n     */\n    public setRenderLayer(layer: number) {\n        RenderController.layers[this.renderLayer.toString()].forEach((renderer: RenderController, index: number) => {\n            if (renderer === this) {\n                delete RenderController.layers[this.renderLayer.toString()][index];\n            }\n        });\n\n        this.renderLayer = layer;\n        RenderController.layers[this.renderLayer.toString()].push(this);\n    }\n\n    /**\n     * Executes Every Frame\n     */\n    public abstract render(): void;\n\n    /**\n     * Initializes Render Layer Object\n     */\n    public static initLayers() {\n        for (let layer = MIN_LAYER; layer < MAX_LAYER; layer++) {\n            RenderController.layers[layer.toString()] = [];\n        }\n    }\n\n    /**\n     * Deletes a Render Controller from the Render Layers Variable\n     * @param renderer Render Controller to Delete\n     */\n    public static remove(renderer: RenderController) {\n        for (let layer in RenderController.layers) {\n            for (let renderController in RenderController.layers[layer]) {\n                if (RenderController.layers[layer][renderController] === renderer) {\n                    delete RenderController.layers[layer][renderController];\n                }\n            }\n        }\n    }\n\n    /**\n     * Renders Every Controller Instance in the Layers Array\n     */\n    public static renderAllControllers() {\n        for (let layer in RenderController.layers) {\n            const CONTROLLERS = RenderController.layers[layer] as Array<RenderController>;\n\n            CONTROLLERS.forEach((renderController) => {\n                if (!renderController.invisible) {\n                    renderController.render();\n                }\n            });\n        }\n    }\n}","/**\n * Crumble Client Render Engine\n * @author Connell Reffo\n */\n\nimport { Vec2, BG_COLOUR, PLAYER_DIMENSIONS, HANDROCKET_DIMENSIONS, GRAPHICS_PATH, PLAYER_FALL_DIMENSIONS } from \"./utils\";\n\nimport Camera from \"./gameobjects/camera\";\nimport RenderController from \"./gameobjects/controller\";\nimport p5 from \"p5\";\n\n/**\n * Tracks Assets tp be Used in Game Rendering\n */\nexport let assets = {\n    HANDROCKET_SPRITESHEET: [] as Array<p5.Image>,\n    PLAYER_SPRITESHEET: [] as Array<p5.Image>,\n    PLAYER_FALL_SPRITESHEET: [] as Array<p5.Image>,\n    PLAYER_SHADOW: new p5.Image()\n};\n\n/**\n * Position of the Mouse on the Canvas\n */\nexport let mousePos: Vec2;\n\n/**\n * Splits a Spritesheet Horizontally\n * @param sheet Spritesheet Image\n * @param spriteWidth Width of Individual Sprite\n * @param spriteHeight Height of Individual Sprite\n * @param frames Frames in Spritesheet\n */\nfunction splitSpritesheet(sheet: p5.Image, spriteWidth: number, spriteHeight: number, frames: number): Array<p5.Image> {\n    const splitSheet: Array<p5.Image> = [];\n\n    for (let frame = 0; frame < spriteWidth * frames; frame += spriteWidth) {\n        const FRAME_IMAGE = sheet.get(frame, 0, spriteWidth, spriteHeight);\n\n        splitSheet.push(FRAME_IMAGE);\n    }\n\n    return splitSheet;\n}\n\n/**\n * Main P5 Instance to Handle Render Controller Rendering\n */\nexport function game(p: p5) {\n    let playerSpritesheet: p5.Image;\n    let playerFallSpritesheet: p5.Image;\n    let handrocketSpritesheet: p5.Image;\n\n    p.preload = () => {\n\n        // Initialize Mouse Position\n        mousePos = Vec2.zero;\n\n        // Load Assets\n        playerSpritesheet = p.loadImage(GRAPHICS_PATH + \"player.png\");\n        playerFallSpritesheet = p.loadImage(GRAPHICS_PATH + \"player_fall.png\");\n        handrocketSpritesheet = p.loadImage(GRAPHICS_PATH + \"handrocket.png\");\n\n        assets.PLAYER_SHADOW = p.loadImage(GRAPHICS_PATH + \"shadow.png\");\n    }\n\n    p.setup = () => {\n\n        // Split Player Spritesheet Into Frames\n        assets.PLAYER_SPRITESHEET = splitSpritesheet(playerSpritesheet, PLAYER_DIMENSIONS.width, PLAYER_DIMENSIONS.height, PLAYER_DIMENSIONS.frames);\n\n        // Split Falling Player Spritesheet Into Frames\n        assets.PLAYER_FALL_SPRITESHEET = splitSpritesheet(playerFallSpritesheet, PLAYER_FALL_DIMENSIONS.width, PLAYER_FALL_DIMENSIONS.height, PLAYER_FALL_DIMENSIONS.frames)\n\n        // Split Handrocket Spritesheet Into Frames\n        assets.HANDROCKET_SPRITESHEET = splitSpritesheet(handrocketSpritesheet, HANDROCKET_DIMENSIONS.width, HANDROCKET_DIMENSIONS.height, HANDROCKET_DIMENSIONS.frames);\n        \n        // Initialize Canvas\n        const CANV = p.createCanvas(p.windowWidth, p.windowHeight, p.P2D);\n        const CONTEXT = CANV.elt.getContext(\"2d\");\n\n        CONTEXT.mozImageSmoothingEnabled = false;\n        CONTEXT.webkitImageSmoothingEnabled = false;\n        CONTEXT.msImageSmoothingEnabled = false;\n        CONTEXT.imageSmoothingEnabled = false;\n\n        p.frameRate(60);\n        p.disableFriendlyErrors = true;\n    }\n\n    p.draw = () => {\n        \n        // Clear Canvas\n        p.clear();\n        p.background(BG_COLOUR);\n\n        // Update Camera\n        Camera.update();\n\n        // Render All Render Controllers\n        RenderController.renderAllControllers();\n\n        // Set Mouse Position\n        mousePos = new Vec2(p.mouseX, p.mouseY);\n    }\n\n    p.windowResized = () => {\n\n        // Constantly Scale Canvas to Screen Size\n        p.resizeCanvas(p.windowWidth, p.windowHeight);\n    }\n}","/**\n * Handrocket Rendering Class\n * @author Connell Reffo\n */\n\nimport { assets } from \"../renderer\";\nimport { render } from \"../game\";\nimport { Vec2, FacingDirections, HandrocketAngles, HANDROCKET_DIMENSIONS } from \"../utils\";\n\nimport Camera from \"./camera\";\nimport RenderController from \"./controller\";\n\n/**\n * Player Held Handrocket Renderer\n */\nexport default class Handrocket extends RenderController {\n    public pos: Vec2;\n    public direction: FacingDirections;\n    public angle: HandrocketAngles;\n\n    private spriteFrame: number;\n\n    /**\n     * @param pos Position to Render Handrocket at\n     */\n    constructor(pos: Vec2) {\n        super();\n\n        this.pos = pos;\n        this.direction = FacingDirections.LEFT;\n        this.angle = HandrocketAngles.MIDDLE;\n\n        this.spriteFrame = 0;\n\n        this.setRenderLayer(6);\n    }\n\n    /**\n     * Sets the Angle Sprite\n     */\n    public setAngle(angle: HandrocketAngles) {\n        this.angle = angle;\n\n        switch (this.angle) {\n            case HandrocketAngles.UP:\n                this.spriteFrame = 2;\n                break;\n            \n            case HandrocketAngles.MIDDLE:\n                this.spriteFrame = 0;\n                break;\n            \n            case HandrocketAngles.DOWN:\n                this.spriteFrame = 1;\n                break;\n        }\n    }\n\n    public render() {\n        const REND_POS = Camera.convertToCameraSpace(this.pos);\n\n        let directionHorizontalOffset: number;\n        let angleVertOffset: number;\n\n        render.push();\n\n        // Check Direction\n        switch(this.direction) {\n            case FacingDirections.LEFT:\n                const HORIZONTAL_OFFSET = 5;\n                \n                render.translate(REND_POS.x - Camera.pos.x + (render.windowWidth / 2 - HORIZONTAL_OFFSET) + this.pos.x + HANDROCKET_DIMENSIONS.width, 0);\n                render.scale(-1, 1);\n\n                directionHorizontalOffset = 32;\n                break;\n            \n            case FacingDirections.RIGHT:\n                render.scale(1, 1);\n                \n                directionHorizontalOffset = 29;\n                break;\n        }\n\n        // Adjust Vertical Offset Based on Angle\n        switch (this.spriteFrame) {\n            case 1:\n                angleVertOffset = 5;\n                break;\n\n            case 2:\n                angleVertOffset = -15;\n                break;\n\n            default:\n                angleVertOffset = 0;\n                break;\n        }\n\n        // Render Hand Rocket\n        render.imageMode(render.CENTER);\n        render.image(assets.HANDROCKET_SPRITESHEET[this.spriteFrame], REND_POS.x + directionHorizontalOffset, REND_POS.y + angleVertOffset, HANDROCKET_DIMENSIONS.width * HANDROCKET_DIMENSIONS.scale, HANDROCKET_DIMENSIONS.height * HANDROCKET_DIMENSIONS.scale);\n        \n        render.pop();\n    }\n}","/**\n * Player Shadow Rendering Class\n * @author Connell Reffo\n */\n\nimport { assets } from \"../renderer\";\nimport { render } from \"../game\";\nimport { Vec2, PLAYER_DIMENSIONS } from \"../utils\";\n\nimport Camera from \"./camera\";\nimport RenderController from \"./controller\";\n\n/**\n * Player Shadow Renderer\n */\nexport default class Shadow extends RenderController {\n    public pos: Vec2;\n\n    /**\n     * @param pos Position to Render Shadow at\n     */\n    constructor(pos: Vec2) {\n        super();\n\n        this.pos = pos;\n        this.setRenderLayer(4);\n    }\n\n    public render() {\n\n        // Render Shadow\n        const REND_POS = Camera.convertToCameraSpace(this.pos);\n\n        render.tint(255, 80);\n        render.imageMode(render.CENTER);\n        render.image(\n            assets.PLAYER_SHADOW,\n            REND_POS.x,\n            REND_POS.y,\n            6 * PLAYER_DIMENSIONS.scale * 0.9,\n            4 * PLAYER_DIMENSIONS.scale * 0.9\n        );\n        render.tint(255, 255);\n    }\n}","/**\n * Nametag Rendering Class\n * @author Connell Reffo\n */\n\nimport { render } from \"../game\";\nimport { Vec2 } from \"../utils\";\n\nimport Camera from \"./camera\";\nimport RenderController from \"./controller\";\n\n/**\n * Player Nametag Renderer\n */\nexport default class Nametag extends RenderController {\n    public text: string;\n    public colour: string;\n    public pos: Vec2;\n\n    /**\n     * @param pos Position to Render Namtag at\n     */\n    constructor(text: string, colour: string, pos: Vec2) {\n        super();\n        \n        this.text = text;\n        this.colour = colour;\n        this.pos = pos;\n\n        this.setRenderLayer(9);\n    }\n\n    public render() {\n        const REND_POS = Camera.convertToCameraSpace(this.pos);\n\n        // Render Text\n        render.fill(this.colour);\n        render.textFont(\"Crumble\");\n        render.textAlign(render.CENTER, render.CENTER);\n        render.textSize(25);\n        render.text(this.text, REND_POS.x, REND_POS.y);\n    }\n}","/**\n * Particle Rendering Classes\n * @author Connell Reffo\n */\n\nimport { render } from \"../game\";\nimport { randomInt, Vec2, IParticle, TILE_DESTROY_PARTICLE_COLOUR, TILE_SIZE, MUZZLE_BLAST_PARTICLE_COLOUR, ROCKET_SMOKE_TRAIL_COLOUR, ROCKET_PROJECTILE_COLOUR } from \"../utils\";\n\nimport Camera from \"./camera\";\nimport RenderController from \"./controller\";\n\n/**\n * Generates a Random Speed Value for Either Rise or Run Particle Properties\n * @param speed Determines Overall if the Value will be Consistently Fast or Slow (Higher is Faster)\n */\nfunction randomSpeed(speed: number): number {\n    return randomInt(-300, 300) * (speed / 10000);\n}\n\n/**\n * Tile Destroy Particles Renderer\n */\nexport class TileDestroyParticles extends RenderController {\n    public tilePos: Vec2;\n    \n    private particles: Array<IParticle> = [];\n    private particleCount: number = 8;\n    \n    private minParticleSize: number = 9;\n    private maxParticleSize: number = 12;\n\n    private minLifetime: number = 30;\n    private maxLifetime: number = 50;\n\n    private baseSpeed: number = 140;\n\n    /**\n     * @param tilePos Position of Destroyed Tile\n     */\n    constructor(tilePos: Vec2) {\n        super();\n\n        this.tilePos = tilePos;\n\n        this.setRenderLayer(4);\n        this.initParticles();\n    }\n\n    /**\n     * Initializes Tile Destroy Particles\n     */\n    private initParticles() {\n        for (let pc = 0; pc < this.particleCount; pc++) {\n            this.particles.push({\n                pos: this.tilePos,\n                size: randomInt(this.minParticleSize, this.maxParticleSize),\n                maxLifetimeFrames: randomInt(this.minLifetime, this.maxLifetime),\n                lifetimeFrames: 0,\n                direction: {\n                    rise: randomSpeed(this.baseSpeed),\n                    run: randomSpeed(this.baseSpeed)\n                }\n            });\n        }\n    }\n\n    public render() {\n        const REND_POS = Camera.convertToCameraSpace(new Vec2(this.tilePos.x * TILE_SIZE - (TILE_SIZE * 1.5), this.tilePos.y * TILE_SIZE - (TILE_SIZE * 1.5)));\n\n        // Render Particles\n        this.particles.forEach((particle) => {\n            render.noStroke();\n            render.fill(TILE_DESTROY_PARTICLE_COLOUR);\n            render.rectMode(render.CENTER);\n            render.rect(REND_POS.x + particle.pos.x + (particle.direction.run * 0.4), REND_POS.y + particle.pos.y + (particle.direction.rise * 0.4), particle.size, particle.size);\n\n            if (particle.lifetimeFrames >= particle.maxLifetimeFrames) {\n                this.particles = this.particles.filter((part) => {\n                    return part !== particle;\n                });\n            }\n            else if (particle.lifetimeFrames >= particle.maxLifetimeFrames - particle.size) {\n                particle.size--;\n            }\n\n            particle.pos = new Vec2(particle.pos.x + particle.direction.run, particle.pos.y + particle.direction.rise);\n            particle.lifetimeFrames++;\n        });\n\n        // Delete Current Render Controller\n        if (this.particles.length === 0) {\n            RenderController.remove(this);\n        }\n    }\n}\n\n/**\n * Handrocket Initial Shot Blast Particles\n */\nexport class MuzzleBlastParticles extends RenderController {\n    public pos: Vec2;\n\n    private particles: Array<IParticle> = [];\n    private particleCount: number = 9;\n\n    private minParticleSize: number = 8;\n    private maxParticleSize: number = 11;\n\n    private baseSpeed: number = 60;\n\n    /**\n     * @param pos Position to Create Particles At\n     */\n    constructor(pos: Vec2) {\n        super();\n\n        this.pos = pos;\n\n        this.setRenderLayer(7);\n        this.initParticles();\n    }\n\n    /**\n     * Initializes Particles Array\n     */\n    private initParticles() {\n        for (let pc = 0; pc < this.particleCount; pc++) {\n            this.particles.push({\n                pos: this.pos,\n                size: randomInt(this.minParticleSize, this.maxParticleSize),\n                maxLifetimeFrames: randomInt(20, 35), \n                lifetimeFrames: 0,\n                direction: {\n                    rise: randomSpeed(this.baseSpeed),\n                    run: randomSpeed(this.baseSpeed)\n                }\n            });\n        }\n    }\n\n    public render() {\n\n        // Render Particles\n        this.particles.forEach((particle) => {\n            const PARTICLE_REND_POS = Camera.convertToCameraSpace(particle.pos);\n\n            render.noStroke();\n            render.fill(MUZZLE_BLAST_PARTICLE_COLOUR);\n            render.rectMode(render.CENTER);\n            render.rect(PARTICLE_REND_POS.x + (particle.direction.run * 0.4), PARTICLE_REND_POS.y + (particle.direction.rise * 0.4), particle.size, particle.size);\n\n            if (particle.lifetimeFrames >= particle.maxLifetimeFrames && this.particles.length > 0) {\n                this.particles = this.particles.filter((part) => {\n                    return part !== particle;\n                });\n            }\n            else if (particle.lifetimeFrames >= particle.maxLifetimeFrames - particle.size) {\n                particle.size--;\n            }\n            else if (this.particles.length === 0) {\n\n                // Destroy Instance when All Particles are Gone\n                RenderController.remove(this);\n            }\n\n            particle.pos = new Vec2(particle.pos.x + (particle.direction.run), particle.pos.y + (particle.direction.rise));\n            particle.lifetimeFrames++;\n        });\n    }\n}\n\n/**\n * Smoke Trail Renderer\n */\nexport class SmokeTrailParticles extends RenderController {\n    public pos: Vec2;\n    public stopParticles: boolean;\n\n    private particles: Array<IParticle> = [];\n    private particleCount: number = 8;\n    \n    private minParticleSize: number = 8;\n    private maxParticleSize: number = 11;\n\n    private minLifetime: number = 10;\n    private maxLifetime: number = 65;\n\n    private baseSpeed: number = 30;\n\n    /**\n     * @param pos Initial Position to Start Rendering At\n     */\n    constructor(pos: Vec2) {\n        super();\n\n        this.pos = pos;\n\n        this.stopParticles = false;\n\n        this.setRenderLayer(6);\n        this.initParticles();\n    }\n\n    /**\n     * Initializes Particles Array\n     */\n    private initParticles() {\n        for (let pc = 0; pc < this.particleCount; pc++) {\n            this.particles.push({\n                pos: this.pos,\n                size: randomInt(this.minParticleSize, this.maxParticleSize),\n                maxLifetimeFrames: randomInt(this.minLifetime, this.maxLifetime), \n                lifetimeFrames: 0,\n                direction: {\n                    rise: randomSpeed(this.baseSpeed),\n                    run: randomSpeed(this.baseSpeed)\n                }\n            });\n        }\n    }\n\n    public render() {\n\n        // Render Particles\n        this.particles.forEach((particle) => {\n            const PARTICLE_REND_POS = Camera.convertToCameraSpace(particle.pos);\n\n            render.noStroke();\n            render.fill(ROCKET_SMOKE_TRAIL_COLOUR);\n            render.rectMode(render.CENTER);\n            render.rect(PARTICLE_REND_POS.x, PARTICLE_REND_POS.y, particle.size, particle.size);\n\n            if (particle.lifetimeFrames >= particle.maxLifetimeFrames) {\n                if (!this.stopParticles) {\n                    particle.pos = this.pos;\n                    particle.size = randomInt(this.minParticleSize, this.maxParticleSize);\n                    particle.maxLifetimeFrames = randomInt(this.minLifetime, this.maxLifetime);\n                    particle.lifetimeFrames = 0;\n                    particle.direction = {\n                        rise: randomSpeed(this.baseSpeed),\n                        run: randomSpeed(this.baseSpeed)\n                    }\n                }\n                else if (this.particles.length > 0) {\n                    this.particles = this.particles.filter((part) => {\n                        return part !== particle;\n                    });\n                }       \n            }\n            else if (particle.lifetimeFrames >= particle.maxLifetimeFrames - particle.size) {\n                particle.size--;\n            }\n\n            particle.pos = new Vec2(particle.pos.x + (particle.direction.run), particle.pos.y + (particle.direction.rise));\n            particle.lifetimeFrames++;\n        });\n\n        // Check if All Particles are Gone and Delete Current Instance\n        if (this.particles.length === 0) {\n            RenderController.remove(this);\n        }\n    }\n}\n\n/**\n * Rocket Explosion Particles\n */\nexport class ExplodeParticles extends RenderController {\n    public pos: Vec2;\n\n    private particles: Array<IParticle> = [];\n    private particleCount: number = 6;\n    \n    private minParticleSize: number = 10;\n    private maxParticleSize: number = 12;\n\n    private minLifetime: number = 20;\n    private maxLifetime: number = 35;\n\n    private baseSpeed: number = 95;\n\n    /**\n     * @param pos Position to Render Explosion At\n     */\n    constructor(pos: Vec2) {\n        super();\n\n        this.pos = pos;\n\n        this.setRenderLayer(7);\n        this.initParticles();\n    }\n\n    /**\n     * Initializes Particles Array\n     */\n    public initParticles() {\n        for (let pc = 0; pc < this.particleCount; pc++) {\n            this.particles.push({\n                pos: this.pos,\n                size: randomInt(this.minParticleSize, this.maxParticleSize),\n                maxLifetimeFrames: randomInt(this.minLifetime, this.maxLifetime), \n                lifetimeFrames: 0,\n                direction: {\n                    rise: randomSpeed(this.baseSpeed),\n                    run: randomSpeed(this.baseSpeed)\n                }\n            });\n        }\n    }\n\n    public render() {\n\n        // Render Particles\n        this.particles.forEach((particle) => {\n            const PARTICLE_REND_POS = Camera.convertToCameraSpace(particle.pos);\n\n            render.noStroke();\n            render.fill(ROCKET_PROJECTILE_COLOUR);\n            render.rectMode(render.CENTER);\n            render.rect(PARTICLE_REND_POS.x, PARTICLE_REND_POS.y, particle.size, particle.size);\n\n            if (particle.lifetimeFrames >= particle.maxLifetimeFrames) {\n                if (this.particles.length > 0) {\n                    this.particles = this.particles.filter((part) => {\n                        return part !== particle;\n                    });\n                }\n            }\n            else if (particle.lifetimeFrames >= particle.maxLifetimeFrames - particle.size) {\n                particle.size--;\n            }\n\n            particle.pos = new Vec2(particle.pos.x + (particle.direction.run), particle.pos.y + (particle.direction.rise));\n            particle.lifetimeFrames++;\n        });\n\n        // Delete Current Render Controller\n        if (this.particles.length === 0) {\n            RenderController.remove(this);\n        }\n    }\n}\n","/**\n * Player Rendering Class\n * @author Connell Reffo\n */\n\nimport { assets } from \"../renderer\";\nimport { render } from \"../game\";\nimport { Vec2, FacingDirections, PlayerAnimationStates, HandrocketAngles, HANDROCKET_DIMENSIONS, NAMETAG_ENEMY_COLOUR, NAMETAG_SELF_COLOUR, TOTAL_CHUNK_SIZE, PLAYER_DIMENSIONS, PLAYER_SHADOW_OFFSET, PLAYER_NAMETAG_OFFSET, PLAYER_FALL_DIMENSIONS } from \"../utils\";\nimport { clientSocketId } from \"../socket\";\nimport { Image } from \"p5\";\n\nimport Camera from \"./camera\";\nimport Handrocket from \"./handrocket\"\nimport Shadow from \"./shadow\";\nimport Nametag from \"./nametag\";\nimport RenderController from \"./controller\";\n\nimport { MuzzleBlastParticles } from \"./particles\";\n\n/**\n * Player Renderer\n */\nexport default class Player extends RenderController {\n    public name: string;\n    public pos: Vec2;\n    public direction: FacingDirections;\n    public serverPos: Vec2;\n    public socketId: string;\n\n    public currentChunk: Vec2;\n    public dead: boolean;\n\n    public handrocket: Handrocket;\n    public shadow: Shadow;\n    public nametag: Nametag;\n\n    private speed: Vec2;\n    private calculatingSpeed: boolean;\n    private state: PlayerAnimationStates;\n    private frame: number;\n\n    private handrocketVertOffset: number;\n\n    private fallAcceleration = 1.2;\n    private fallVelocity: number = 14;\n    private fallTerminalVelocity: number = 50;\n\n    /**\n     * @param name Name of the Player\n     * @param pos Position of the Player\n     * @param socketId Socket ID of the Player\n     * @param renderLayer Layer to Render the Player on\n     */\n    constructor(name: string, pos: Vec2, socketId: string) {\n        super();\n\n        this.name = name;\n        this.pos = pos;\n        this.serverPos = pos;\n        this.socketId = socketId;\n        this.direction = FacingDirections.LEFT;\n        this.currentChunk = Vec2.zero;\n\n        this.calculatingSpeed = false;\n        this.speed = Vec2.zero;\n        this.state = PlayerAnimationStates.IDLE;\n        this.frame = 0;\n\n        this.dead = false;\n\n        this.handrocketVertOffset = HANDROCKET_DIMENSIONS.vertOffsetNormal;\n\n        // Set Namtag Colour\n        let nametagColour = NAMETAG_ENEMY_COLOUR;\n\n        if (clientSocketId === this.socketId) {\n            nametagColour = NAMETAG_SELF_COLOUR;\n        }\n\n        // Instantiate Other Render Controllers\n        this.handrocket = new Handrocket(this.pos);\n        this.shadow = new Shadow(this.pos);\n        this.nametag = new Nametag(this.name, nametagColour, this.pos);\n\n        // Calculate Current Chunk\n        this.calcCurrentChunk();\n\n        // Set Render Layer\n        this.setRenderLayer(5);\n\n    }\n\n    /**\n     * Destroys the Current Client Side Player Instance\n     */\n    public destroy() {\n        RenderController.remove(this.handrocket);\n        RenderController.remove(this.shadow);\n        RenderController.remove(this.nametag);\n        RenderController.remove(this);\n    }\n\n    /**\n     * Sets the Angle the the Handrocket Should Point\n     * @param angle The Angle to Set the Handrocket to Point Towards\n     */\n    public setHandrocketAngle(angle: HandrocketAngles) {\n        this.handrocket.setAngle(angle);\n    }\n\n    /**\n     * Returns the Chunk Position of Whatever Chunk the Player is Currently on\n     */\n    public calcCurrentChunk() {\n        this.currentChunk = new Vec2(Math.round(this.pos.x / (TOTAL_CHUNK_SIZE)), Math.round(this.pos.y / (TOTAL_CHUNK_SIZE)));\n    }\n\n    /**\n     * Updates the Speed Variable of this Player\n     * @param socketId Socket ID of Player to Calculate Speed for\n     */\n    public async updateSpeed() {\n\n        // Calculate Speed\n        this.calculatingSpeed = true;\n\n        const SPEED_POS_OLD = new Vec2(this.pos.x, this.pos.y);\n        const RUN_ANIM_THRESHOLD = 0.55;\n\n        setTimeout(() => {\n\n            // Set Speed Variable\n            this.speed = new Vec2(\n                Math.abs(SPEED_POS_OLD.x - this.pos.x),\n                Math.abs(SPEED_POS_OLD.y - this.pos.y)\n            );\n\n            this.calculatingSpeed = false;\n        }, 150);\n\n        // Set Animation State\n        if (this.speed.x > RUN_ANIM_THRESHOLD || this.speed.y > RUN_ANIM_THRESHOLD) {\n            this.state = PlayerAnimationStates.RUN;\n        }\n        else {\n            this.state = PlayerAnimationStates.IDLE;\n        }\n    }\n\n    /**\n     * Triggers When this Player Dies\n     * @param fellOffFront Tells the Client if the Player Should be Rendered on Top or Behind Chunks (Adds Depth)\n     */\n    public onDeath(fellOffFront: boolean) {\n        let renderLayer = 1;\n\n        this.dead = true;\n        this.frame = 0;\n\n        this.handrocket.invisible = true;\n        this.shadow.invisible = true;\n        this.nametag.invisible = true;\n\n        if (fellOffFront) {\n            renderLayer = 5;\n        }\n\n        this.setRenderLayer(renderLayer);\n\n        const REND_POS = Camera.convertToCameraSpace(this.pos);\n\n        const DEATH_INTERVAL = setInterval(() => {\n            if (REND_POS.y >= 610) {\n                clearInterval(DEATH_INTERVAL);\n            }\n\n            if (this.fallVelocity < this.fallTerminalVelocity) {\n                this.fallVelocity += this.fallAcceleration;\n            }\n\n            this.serverPos = new Vec2(this.pos.x, this.pos.y + this.fallVelocity);\n        }, 15);\n    }\n\n    /**\n     * Instantiates Muzzle Blast Particles at the Position of the Handrocket Muzzle\n     */\n    public createMuzzleBlast() {\n\n        // Set Direction\n        let direction = -1;\n\n        if (this.direction === FacingDirections.RIGHT) {\n            direction = 1;\n        }\n\n        // Set Offset Values\n        let offset = Vec2.zero;  \n\n        switch(this.handrocket.angle) {\n            case HandrocketAngles.UP:\n                offset = new Vec2(30 * direction, -15);\n                break;\n\n            case HandrocketAngles.MIDDLE:\n                offset = new Vec2(50 * direction, -10);\n                break;\n\n            case HandrocketAngles.DOWN:\n                offset = new Vec2(35 * direction, 12);\n                break;\n        }\n\n        // Create Muzzle Blast Instance\n        new MuzzleBlastParticles(new Vec2(this.handrocket.pos.x + offset.x, this.handrocket.pos.y + offset.y));\n    }\n\n    /**\n     * Renders a Sprite as the Player\n     * @param sprite Sprite to Render\n     * @param renderPos Position on Canvas to Render Sprite at\n     * @param width Width of Sprite\n     * @param height Height of Sprite\n     */\n    private renderPlayerSprite(sprite: Image, renderPos: Vec2, width: number, height: number) {\n        render.push();\n\n        switch (this.direction) {\n            case FacingDirections.LEFT:\n                render.scale(1, 1);\n                break;\n            case FacingDirections.RIGHT:\n                render.translate(renderPos.x - Camera.pos.x + (render.windowWidth / 2) + this.pos.x, 0);\n                render.scale(-1, 1);\n                break;\n        }\n\n        render.imageMode(render.CENTER);\n        render.image(\n            sprite,\n            renderPos.x,\n            renderPos.y,\n            width,\n            height\n        );\n\n        render.pop();\n    }\n\n    public render() {\n\n        // Lerp Position\n        this.pos = Vec2.lerp(this.pos, this.serverPos, 0.12);\n\n        const REND_POS = Camera.convertToCameraSpace(this.pos);\n\n        // Update Player Speed\n        if (!this.calculatingSpeed) {\n            this.updateSpeed();\n        }\n\n        // Set Animation State\n        const ANIM_SPEED_THRESHOLD = 0.4;\n\n        if (!this.dead) {\n\n            // Check Player Speed\n            if (this.speed.x > ANIM_SPEED_THRESHOLD || this.speed.y > ANIM_SPEED_THRESHOLD) {\n                this.state = PlayerAnimationStates.RUN;\n            }\n            else {\n                this.state = PlayerAnimationStates.IDLE;\n            }\n\n            // Animate Player\n            switch (this.state) {\n                case PlayerAnimationStates.IDLE:\n                    if (render.frameCount % 20 === 0) {\n                        this.frame++;\n\n                        if (this.frame > 1) {\n                            this.frame = 0;\n                            this.handrocketVertOffset = HANDROCKET_DIMENSIONS.vertOffsetNormal;\n                        }\n                        else {\n                            this.handrocketVertOffset = HANDROCKET_DIMENSIONS.vertOffsetDown;\n                        }\n                    }\n\n                    break;\n\n                case PlayerAnimationStates.RUN:\n                    if (this.frame < 2) {\n                        this.frame = 1;\n                    }\n\n                    if (render.frameCount % 9 === 0) {\n                        if (this.frame >= PLAYER_DIMENSIONS.frames - 1) {\n                            this.frame = 1;\n                            this.handrocketVertOffset = HANDROCKET_DIMENSIONS.vertOffsetNormal;\n                        }\n                        else if (this.frame === 2 || this.frame === 4 || this.frame === 6) {\n                            this.handrocketVertOffset = HANDROCKET_DIMENSIONS.vertOffsetUp;\n                        }\n                        else {\n                            this.handrocketVertOffset = HANDROCKET_DIMENSIONS.vertOffsetNormal;\n                        }\n\n                        this.frame++;\n                    }\n\n                    break;\n            }\n\n            // Update Sprite\n            this.renderPlayerSprite(assets.PLAYER_SPRITESHEET[this.frame], REND_POS, PLAYER_DIMENSIONS.width * PLAYER_DIMENSIONS.scale, PLAYER_DIMENSIONS.height * PLAYER_DIMENSIONS.scale);\n        }\n        else {\n            this.state = PlayerAnimationStates.IDLE;\n\n            // Animate Falling Player\n            if (render.frameCount % 10 === 0) {\n                this.frame++;\n\n                if (this.frame > PLAYER_FALL_DIMENSIONS.frames - 1) {\n                    this.frame = 0;\n                }\n            }\n\n            // Update Sprite\n            this.renderPlayerSprite(assets.PLAYER_FALL_SPRITESHEET[this.frame], REND_POS, PLAYER_FALL_DIMENSIONS.width * PLAYER_DIMENSIONS.scale, PLAYER_FALL_DIMENSIONS.height * PLAYER_DIMENSIONS.scale);\n        }\n\n        // Set Held Handrocket Position\n        this.handrocket.pos = new Vec2(this.pos.x, this.pos.y + this.handrocketVertOffset);\n        this.handrocket.direction = this.direction;\n\n        // Set Shadow Position\n        this.shadow.pos = new Vec2(this.pos.x, this.pos.y + PLAYER_SHADOW_OFFSET);\n\n        // Set Nametag Position\n        this.nametag.pos = new Vec2(this.pos.x, this.pos.y - PLAYER_NAMETAG_OFFSET);\n    }\n}","/**\n * Rocket Projectile Rendering Class\n * @author Connell Reffo\n */\n\nimport { render } from \"../game\";\nimport { Vec2, CLIENT_ROCKET_SPEED, ROCKET_PROJECTILE_COLOUR } from \"../utils\";\n\nimport { SmokeTrailParticles, ExplodeParticles } from \"./particles\";\n\nimport Camera from \"./camera\";\nimport RenderController from \"./controller\";\n \n/**\n * Handrocket Projectile Renderer\n */\nexport default class Rocket extends RenderController {\n    public pos: Vec2;\n    public direction: Vec2;\n\n    private trailParticles: SmokeTrailParticles;\n\n    /**\n     * @param pos Initial Position of Projectile\n     * @param direction The Direction the Rocket is Moving in\n     */\n    constructor(pos: Vec2, direction: Vec2) {\n        super();\n\n        this.pos = pos;\n        this.direction = direction;\n\n        this.trailParticles = new SmokeTrailParticles(this.pos);\n\n        this.setRenderLayer(7);\n    }\n\n    /**\n     * Explodes the Current Rocket Instance\n     */\n    public explode() {\n\n        // Halt Trail Particles\n        this.trailParticles.stopParticles = true;\n\n        // Instantiate Explosion Particles\n        new ExplodeParticles(this.pos);\n\n        // Camera Shake\n        Camera.shake(3, 7);\n\n        // Delete Current Render Controller\n        RenderController.remove(this);\n    }\n\n    public render() {\n\n        // Move Client Side Instance of Test Projectile\n        this.pos = new Vec2(this.pos.x + (CLIENT_ROCKET_SPEED * this.direction.x), this.pos.y + (CLIENT_ROCKET_SPEED * this.direction.y * 0.75));\n\n        // Set Position of Trail\n        this.trailParticles.pos = this.pos;\n\n        const REND_POS = Camera.convertToCameraSpace(this.pos);\n\n        // Render Projectile\n        render.noStroke();\n        render.fill(ROCKET_PROJECTILE_COLOUR);\n        render.rectMode(render.CENTER);\n        render.rect(REND_POS.x, REND_POS.y, 13, 13);  \n    }\n}","/**\n * Camera Manager Class\n * @author Connell Reffo\n */\n\nimport { Vec2, randomInt, TOTAL_CHUNK_SIZE } from \"../utils\";\nimport { connectedPlayers, clientSocketId } from \"../socket\";\nimport { render } from \"../game\";\n\nexport default abstract class Camera {\n    public static pos: Vec2;\n\n    private static shakePower: number = 0;\n    private static shakeTimer: number = 0;\n\n    /**\n     * Converts a 2D Vector to a Position Relative to Camera View\n     * @param pos Position to Convert\n     */\n    public static convertToCameraSpace(pos: Vec2): Vec2 {\n        return new Vec2(\n            (render.windowWidth / 2) + pos.x - this.pos.x,\n            (render.windowHeight / 2) + pos.y - this.pos.y\n        );\n    }\n\n    /**\n     * Executes Every Frame\n     */\n    public static update() {\n\n        // Make Camera Lock to Player Chunk Pos\n        if (!connectedPlayers[clientSocketId].dead) {\n            const LERP_POS = Vec2.lerp(Camera.pos, new Vec2(connectedPlayers[clientSocketId].currentChunk.x * TOTAL_CHUNK_SIZE, connectedPlayers[clientSocketId].currentChunk.y * TOTAL_CHUNK_SIZE), 0.1);\n\n            Camera.pos = LERP_POS;\n        }\n\n        // Process Camera Shake\n        if (Camera.shakeTimer >= 0) {\n            const MAX_CAM_DIST = 5;\n\n            let shakePos = new Vec2(randomInt(-MAX_CAM_DIST, MAX_CAM_DIST) * Camera.shakePower, randomInt(-MAX_CAM_DIST, MAX_CAM_DIST) * this.shakePower);\n            Camera.pos = new Vec2(Camera.pos.x + shakePos.x, Camera.pos.y + shakePos.y);\n\n            this.shakeTimer--;\n        }\n    }\n\n    /**\n     * Shakes the Camera\n     * @param power The Power of the Shake\n     * @param duration The Duration of the Shake in Frames\n     */\n    public static shake(power: number, duration: number) {\n        Camera.shakePower = power;\n        Camera.shakeTimer = duration;\n    }\n}","/**\n * Tile Rendering Class\n * @author Connell Reffo\n */\n\nimport { Vec2, RGBColourCode, TILE_NORMAL_COLOUR, TILE_WEAK_COLOUR, TILE_SIZE, CHUNK_SIZE_PADDING } from \"../utils\";\nimport { TileDestroyParticles } from \"./particles\";\nimport { render } from \"../game\";\n\nimport Camera from \"./camera\";\nimport RenderController from \"./controller\";\n\n/**\n * Tile Renderer\n */\nexport default class Tile extends RenderController {\n    public tilePos: Vec2;\n\n    private fadeColour: RGBColourCode;\n    private renderColour: RGBColourCode;\n\n    /**\n     * @param tilePos Tile Position to Render Tile at\n     */\n    constructor(tilePos: Vec2) {\n        super();\n\n        this.tilePos = tilePos;\n\n        this.renderColour = TILE_NORMAL_COLOUR;\n        this.fadeColour = this.renderColour;\n\n        this.setRenderLayer(3);\n    }\n\n    /**\n     * Destroys rhe Current Tile Instance\n     * @param ms Milliseconds Before the Tile Explodes\n     */\n    public async destroy(ms: number) {\n        let interval: NodeJS.Timeout;\n\n        // Flash Effect\n        if (ms > 0) {\n            let flash = false;\n\n            interval = setInterval(() => {\n                if (flash) {\n                    this.fadeColour = TILE_WEAK_COLOUR;\n                }\n                else {\n                    this.fadeColour = TILE_NORMAL_COLOUR;\n                }\n\n                flash = !flash;\n            }, 250);\n        }\n\n        // Hide Tile When Timer Runs Out\n        setTimeout(() => {\n            clearInterval(interval);\n            this.invisible = true;\n\n            // Create Explosion Particles\n            new TileDestroyParticles(this.tilePos);\n\n            // Camera Shake\n            Camera.shake(3.5, 9);\n        }, ms);\n    }\n\n    public render() {\n        const REND_POS = Camera.convertToCameraSpace(new Vec2(this.tilePos.x * TILE_SIZE - (TILE_SIZE * 1.5), this.tilePos.y * TILE_SIZE - (TILE_SIZE * 1.5)));\n\n        // Lerp Colour\n        this.renderColour = RGBColourCode.lerp(this.renderColour, this.fadeColour, 1.8);\n\n        // Render Tile\n        render.noStroke();\n        render.fill(render.color(this.renderColour.r, this.renderColour.g, this.renderColour.b));\n        render.rectMode(render.CENTER);\n        render.rect(REND_POS.x, REND_POS.y, TILE_SIZE + CHUNK_SIZE_PADDING, TILE_SIZE + CHUNK_SIZE_PADDING);\n    }\n}","/**\n * Chunk and Chunk Edge Rendering Classes\n * @author Connell Reffo\n */\n\nimport { render } from \"../game\";\nimport { randomInt, Vec2, CHUNK_SIZE, TOTAL_CHUNK_SIZE, CHUNK_SIZE_PADDING, CHUNK_EDGE_HEIGHT, CHUNK_EDGE_COLOUR } from \"../utils\";\n\nimport Camera from \"./camera\";\nimport RenderController from \"./controller\";\nimport Tile from \"./tile\";\n\n/**\n * Level Chunk Renderer\n */\nexport class Chunk {\n    public chunkPos: Vec2;\n    public tiles: Array<Tile>;\n\n    public chunkEdge: ChunkEdge | undefined;\n\n    /**\n     * @param chunkPos Position to Render Chunk at\n     */\n    constructor(chunkPos: Vec2) {\n        this.chunkPos = chunkPos;\n        this.tiles = [];\n        this.chunkEdge = undefined;\n\n        this.initTiles();\n    }\n\n    /**\n     * Populates Tiles Array with Tiles Inside this Chunk\n     */\n    private initTiles() {\n        for (let y = 0; y < CHUNK_SIZE; y++) {\n            for (let x = 0; x < CHUNK_SIZE; x++) {\n                const TILE_POS = new Vec2(x + (this.chunkPos.x * CHUNK_SIZE), y + (this.chunkPos.y * CHUNK_SIZE));\n                this.tiles.push(new Tile(TILE_POS));\n            }\n        }\n    }\n}\n\n/**\n * Chunk Edge Renderer\n */\nexport class ChunkEdge extends RenderController {\n    public chunkPos: Vec2;\n\n    private particles: Array<{pos: Vec2, size: number, speed: number, direction: number}> = [];\n    private particleCount: number = 5;\n\n    /**\n     * @param chunkPos Position of Chunk to Place Edge At\n     */\n    constructor(chunkPos: Vec2) {\n        super();\n\n        this.chunkPos = chunkPos;\n\n        this.setRenderLayer(2);\n        this.initParticles();\n    }\n\n    /**\n     * Initializes Chunk Edge Particle Effect\n     */\n    private initParticles() {\n        for (let pc = 0; pc < this.particleCount; pc++) {\n            const RAND_SIZE = randomInt(8, 12);\n            const RAND_POS = new Vec2(randomInt(0, TOTAL_CHUNK_SIZE + CHUNK_SIZE_PADDING) + 6, randomInt(0, CHUNK_EDGE_HEIGHT) + RAND_SIZE + 6 * 1.8);\n\n            let particleDir = randomInt(-1, 1);\n\n            if (particleDir === 0) {\n                particleDir = 1;\n            }\n\n            this.particles.push({\n                pos: RAND_POS,\n                size: RAND_SIZE,\n                speed: randomInt(1, 6) * 0.015,\n                direction: particleDir\n            });\n        }\n    }\n\n    public render() {\n        const REND_POS = Camera.convertToCameraSpace(new Vec2(this.chunkPos.x * TOTAL_CHUNK_SIZE, this.chunkPos.y * TOTAL_CHUNK_SIZE + (TOTAL_CHUNK_SIZE / 2) + (CHUNK_EDGE_HEIGHT / 2)));\n\n        // Render Chunk Edge\n        render.noStroke();\n        render.fill(CHUNK_EDGE_COLOUR);\n        render.rectMode(render.CENTER);\n        render.rect(REND_POS.x, REND_POS.y, TOTAL_CHUNK_SIZE + CHUNK_SIZE_PADDING, CHUNK_EDGE_HEIGHT);\n\n        // Render Particles\n        this.particles.forEach((particle) => {\n            particle.pos = new Vec2(particle.pos.x, particle.pos.y + render.sin(render.frameCount * 0.03) * particle.speed * particle.direction);\n\n            const PARTICLE_REND_POS = new Vec2(REND_POS.x + particle.pos.x - (TOTAL_CHUNK_SIZE / 2), REND_POS.y + particle.pos.y);\n\n            render.noStroke();\n            render.fill(CHUNK_EDGE_COLOUR);\n            render.rectMode(render.CENTER);\n            render.rect(PARTICLE_REND_POS.x, PARTICLE_REND_POS.y, particle.size, particle.size);\n        });\n    }\n}","/**\n * Crumble Client Main HTML\n * @author Connell Reffo\n */\n\nimport \"./main.css\";\nimport \"../game\";\nimport \"../socket\";\n\nimport { connectToLobby, displayContentArea } from \"../interface\";\n\nimport * as React from \"react\";\n\n/**\n * Main Crumble Markup Component\n */\nclass Main extends React.Component {\n    render() {\n        return (\n        <>\n            <div id=\"win-screen-container\" style={{display: \"none\"}}>\n                <div id=\"winner-txt\"></div>\n                <button id=\"exit-win-screen-btn\" onClick={() => window.location.reload()}>BACK TO HOME</button>\n            </div>\n\n            <div id=\"content-wrapper-container\">\n                <div className=\"content-wrapper\" id=\"name-choose-menu\" style={{display: \"block\"}}>\n                    <div className=\"title-txt\">&lt; CRUMBLE &gt;</div>\n\n                    <div className=\"hlink\" onClick={() => {displayContentArea(\"how-to-play-info\")}}>HOW TO PLAY</div>\n                    <div className=\"hlink\" onClick={() => {displayContentArea(\"controls-info\")}}>CONTROLS</div><br />\n\n                    <div id=\"client-msg\" style={{display: \"none\"}}></div>\n                    <input className=\"standard-input\" id=\"name-input\" spellCheck=\"false\" placeholder=\"TYPE YOUR PLAYER NAME HERE\"></input><br />\n                    <button className=\"standard-btn\" id=\"name-conf\" onClick={() => connectToLobby()}>ENTER QUEUE</button>\n                </div>\n\n                <div className=\"content-wrapper\" id=\"how-to-play-info\" style={{display: \"none\"}}>\n                    <div className=\"title-txt\">&lt; HOW TO PLAY &gt;</div>\n                    \n                    <div id=\"how-to-play-content\">\n                        <div className=\"info-txt\">The goal of Crumble is to be the final player standing. Parts of the level around you will crumble periodically indicated by a flashing red square.</div><br />\n                        <img className=\"tut-img\" src={process.env.PUBLIC_URL + \"/tutorial/tile_crumble.png\"} alt=\"Tile Crumbling\" /><br />\n\n                        <div className=\"info-txt\">Players have the ability to fire rocket projectiles at certain angles. Upon impact, a rocket will knock them back as well as cause nearby tiles to instantly be destroyed. If a rocket hits a player, it will deal knockback as well destroy nearby tiles.</div>\n                        <img className=\"tut-img\" src={process.env.PUBLIC_URL + \"/tutorial/rocket_projectile.png\"} alt=\"Moving Rocket Projectile\" /><br />\n                        \n                        <div className=\"info-txt\">In terms of elimination. You can die by either falling through a crumbled tile or by falling off the edge of the map.</div>\n                        <img className=\"tut-img\" src={process.env.PUBLIC_URL + \"/tutorial/falling_player.png\"} alt=\"Falling Player\" />\n\n                        <br />\n                    </div>\n                    \n                    <button className=\"standard-btn\" id=\"cancel-queue\" onClick={() => {displayContentArea(\"name-choose-menu\")}}>BACK</button>\n                </div>\n\n                <div className=\"content-wrapper\" id=\"controls-info\" style={{display: \"none\"}}>\n                    <div className=\"title-txt\">&lt; CONTROLS &gt;</div>\n                    \n                    <div className=\"info-txt\"><div className=\"key-icon\">W</div> MOVES YOUR PLAYER UP</div>\n                    <div className=\"info-txt\"><div className=\"key-icon\">A</div> MOVES YOUR PLAYER LEFT</div>\n                    <div className=\"info-txt\"><div className=\"key-icon\">S</div> MOVES YOUR PLAYER DOWN</div>\n                    <div className=\"info-txt\"><div className=\"key-icon\">D</div> MOVES YOUR PLAYER RIGHT</div>\n\n                    <br />\n                    <div className=\"info-txt\"><div className=\"key-icon\">LEFT CLICK</div> SHOOTS A ROCKET</div>\n                    <div className=\"info-txt\"><div className=\"key-icon\">MOVE MOUSE</div> POINTS YOUR WEAPON</div>\n\n                    <button className=\"standard-btn\" id=\"cancel-queue\" onClick={() => {displayContentArea(\"name-choose-menu\")}}>BACK</button>\n                </div>\n\n                <div className=\"content-wrapper\" id=\"match-wait-menu\" style={{display: \"none\"}}>\n                    <div className=\"title-txt\">&lt; CRUMBLE &gt;</div>\n                    <div className=\"subtitle-txt\" id=\"player-waiting\">WAITING FOR PLAYER(S)...</div>\n                    <button className=\"standard-btn\" id=\"cancel-queue\" onClick={() => window.location.reload()}>CANCEL QUEUE</button>\n                </div>\n            </div>\n\n            <div id=\"dev-name\">&copy; CONNELL REFFO</div>\n            <button id=\"leave-game\" style={{display: \"none\"}} onClick={() => window.location.reload()}>LEAVE GAME</button>\n        </>\n        );\n    }\n}\n\nexport default Main;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from \"./react/main\";\nimport * as serviceWorker from \"./react/serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}